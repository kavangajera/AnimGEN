from flask import Blueprint, request, jsonify, send_file
import subprocess
from pathlib import Path
import os
import time
import uuid

video_routes = Blueprint('video_routes', __name__)

# Define constant paths
WORKSPACE_DIR = "/app/workspace"
MEDIA_DIR = "/app/workspace/media"

# Ensure directories exist
os.makedirs(WORKSPACE_DIR, exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)

def create_manim_file(code, session_dir):
    """Create a Manim Python file in the specified directory."""
    file_path = os.path.join(session_dir, "scene.py")
    try:
        print("[INFO] Creating Manim code file...")
        with open(file_path, "w") as f:
            f.write(code)
        print("[SUCCESS] Manim code file created at:", file_path)
    except Exception as e:
        print("[ERROR] Failed to create Manim file:", str(e))
        raise e
    return file_path

def cleanup_old_files(directory, max_age_hours=1):
    """Clean up files older than specified hours."""
    try:
        current_time = time.time()
        for item in Path(directory).glob("*"):
            if item.is_dir():
                # Check if directory is older than max_age_hours
                if (current_time - item.stat().st_mtime) > (max_age_hours * 3600):
                    import shutil
                    shutil.rmtree(item)
    except Exception as e:
        print(f"[WARNING] Cleanup error: {str(e)}")

def generate_video(manim_file, session_dir):
    """Generate video using Manim in the specified directory."""
    try:
        print("[INFO] Starting video generation with Manim...")
        start_time = time.time()
        
        cmd = [
            "manim",
            "-pql",  # Fast rendering (use -pqh for high quality)
            manim_file,
            "SquareToCircleToText"
        ]
        
        print("[DEBUG] Running command:", " ".join(cmd))
        
        result = subprocess.run(
            cmd,
            cwd=session_dir,
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0:
            print("[ERROR] Manim failed with stderr:")
            print(result.stderr)
            return None, f"Manim error: {result.stderr}"
        
        # Look for the video file
        media_dir = os.path.join(session_dir, "media", "videos", "scene", "1080p60")
        print("[INFO] Looking for video file in:", media_dir)
        
        video_files = list(Path(media_dir).glob("*.mp4"))
        
        if not video_files:
            print("[ERROR] No video file found in output directory!")
            return None, "No video file generated by Manim."
        
        video_file = video_files[0]
        print("[SUCCESS] Video generated at:", video_file)
        
        end_time = time.time()
        print(f"[INFO] Video generation took {end_time - start_time:.2f} seconds.")
        
        return str(video_file), None
        
    except Exception as e:
        print("[ERROR] Exception during video generation:", str(e))
        return None, str(e)

@video_routes.route('/generate-video', methods=['POST'])
def generate_video_route():
    try:
        print("[INFO] Received request to generate video...")
        data = request.json
        manim_code = data.get('code')
        
        if not manim_code:
            print("[ERROR] No Manim code provided in the request.")
            return jsonify({'error': 'No Manim code provided'}), 400
        
        # Create a unique session directory
        session_id = str(uuid.uuid4())
        session_dir = os.path.join(WORKSPACE_DIR, session_id)
        os.makedirs(session_dir, exist_ok=True)
        
        print("[INFO] Using session directory:", session_dir)
        
        # Clean up old files
        cleanup_old_files(WORKSPACE_DIR)
        
        try:
            manim_file = create_manim_file(manim_code, session_dir)
            video_path, error = generate_video(manim_file, session_dir)
            
            if error:
                print("[ERROR] Video generation failed:", error)
                return jsonify({"error": error}), 500
            
            print("[INFO] Sending generated video to client...")
            return send_file(
                video_path,
                mimetype='video/mp4',
                as_attachment=True,
                download_name='animation.mp4'
            )
            
        finally:
            # Cleanup will happen in the background for files older than 1 hour
            # We don't delete immediately in case the file is still being sent
            pass
            
    except Exception as e:
        print(f"[ERROR] Exception in generate-video route: {str(e)}")
        return jsonify({"error": str(e)}), 500